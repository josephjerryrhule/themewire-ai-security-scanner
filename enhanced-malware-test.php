<?php

/**
 * Enhanced malware detection test
 */

echo "=== Enhanced Malware Detection Test ===\n";

// WordPress root path
$wordpress_root = realpath('../../../');
echo "WordPress root: $wordpress_root\n\n";

// Enhanced malware patterns (same as in the scanner)
$malware_patterns = [
    '/eval\s*\(\s*base64_decode/',
    '/system\s*\(\s*\$_/',
    '/exec\s*\(\s*\$_/',
    '/shell_exec\s*\(\s*\$_/',
    '/passthru\s*\(\s*\$_/',
    '/\$_POST\[.*\]\s*\(\s*\$_POST/',
    '/\$_GET\[.*\]\s*\(\s*\$_GET/',
    '/file_get_contents\s*\(\s*["\']https?:\/\//',
    '/curl_exec\s*\(\s*\$/',
    '/fwrite\s*\(\s*fopen/',
    '/base64_decode\s*\(\s*\$_/',
    '/<\?php\s+\$\w+\s*=\s*[\'"]\w+[\'"];\s*eval/',
    '/\$\w+\s*=\s*[\'"][a-zA-Z0-9+\/=]{50,}[\'"];\s*eval/',
    '/wp_remote_get\s*\(\s*["\']https?:\/\/[^"\']+\.php/',
    '/add_action\s*\(\s*["\']wp_footer[\'"],\s*function/',
    // Additional patterns for the specific malware we found
    '/function\s+\w+\(\$\w+,\s*\$\w+,\s*\$\w+\)\s*\{\s*global\s+\$\w+;/',
    '/chr\(\d+\)\s*\.\s*chr\(\d+\)/',
    '/\$\w+\s*=\s*chr\(\d+\)/',
    '/unserialize\s*\(\s*\$/',
    '/array_map\s*\(\s*["\'][\w]+[\'"]/',
    '/str_rot13\s*\(\s*base64_decode/',
    '/rawurldecode\s*\(\s*/',
    '/implode\s*\(\s*["\'][\'"],\s*/',
    '/\$_SERVER\s*\[\s*["\']DOCUMENT_ROOT[\'"]/',
    '/glob\s*\(\s*\$\w+\s*\.\s*["\']\/\*[\'"]/',
];

// Test the specific malware file
$malware_file = $wordpress_root . '/wp-content/uploads/mwunhftz.php';

echo "--- Testing Specific Malware File ---\n";
if (file_exists($malware_file)) {
    echo "üîç Analyzing: $malware_file\n";

    $content = file_get_contents($malware_file);
    $file_size = strlen($content);
    echo "File size: $file_size bytes\n";

    $detected_patterns = [];
    $total_matches = 0;

    foreach ($malware_patterns as $index => $pattern) {
        if (preg_match($pattern, $content, $matches)) {
            $detected_patterns[] = [
                'pattern' => $pattern,
                'match' => $matches[0] ?? 'pattern match'
            ];
            $total_matches++;
        }
    }

    echo "\nüö® MALWARE DETECTION RESULTS:\n";
    echo "Suspicious patterns found: $total_matches\n";

    if ($total_matches > 0) {
        echo "üî• THIS FILE IS MALICIOUS!\n\n";
        echo "Detected patterns:\n";
        foreach ($detected_patterns as $i => $detection) {
            echo "  " . ($i + 1) . ". Pattern: " . $detection['pattern'] . "\n";
            echo "     Match: " . substr($detection['match'], 0, 100) . "...\n\n";
        }
    } else {
        echo "‚ùì No patterns matched (may need additional patterns)\n";
    }

    // Additional heuristic checks
    echo "--- Heuristic Analysis ---\n";
    $heuristic_score = 0;
    $heuristic_flags = [];

    // Check for heavily obfuscated code
    if (preg_match_all('/chr\(\d+\)/', $content) > 20) {
        $heuristic_score += 50;
        $heuristic_flags[] = "Heavy use of chr() obfuscation";
    }

    // Check for variable function calls
    if (preg_match('/\$\w+\s*\(\s*\$/', $content)) {
        $heuristic_score += 30;
        $heuristic_flags[] = "Variable function calls";
    }

    // Check for XOR operations
    if (preg_match('/\^\s*\$/', $content)) {
        $heuristic_score += 25;
        $heuristic_flags[] = "XOR operations (encryption/obfuscation)";
    }

    // Check for suspicious function combinations
    if (preg_match('/base64_decode.*eval/s', $content)) {
        $heuristic_score += 75;
        $heuristic_flags[] = "base64_decode + eval combination";
    }

    // Check for POST data processing without validation
    if (preg_match('/\$_POST.*foreach/s', $content)) {
        $heuristic_score += 40;
        $heuristic_flags[] = "Direct POST data processing";
    }

    echo "Heuristic score: $heuristic_score/100\n";
    if ($heuristic_score >= 50) {
        echo "üö® HIGH PROBABILITY MALWARE (Score: $heuristic_score)\n";
    } elseif ($heuristic_score >= 25) {
        echo "‚ö†Ô∏è  SUSPICIOUS (Score: $heuristic_score)\n";
    } else {
        echo "‚úì Low risk (Score: $heuristic_score)\n";
    }

    if (!empty($heuristic_flags)) {
        echo "Heuristic flags:\n";
        foreach ($heuristic_flags as $flag) {
            echo "  ‚Ä¢ $flag\n";
        }
    }
} else {
    echo "‚úì Malware file not found (may have been removed)\n";
}

// Now scan all uploads for suspicious files
echo "\n--- Scanning All Uploads for Malware ---\n";
$uploads_dir = $wordpress_root . '/wp-content/uploads';
$suspicious_files = [];

if (is_dir($uploads_dir)) {
    $iterator = new RecursiveIteratorIterator(
        new RecursiveDirectoryIterator($uploads_dir, RecursiveDirectoryIterator::SKIP_DOTS)
    );

    foreach ($iterator as $file) {
        if ($file->isFile() && $file->getExtension() === 'php') {
            $filepath = $file->getPathname();
            $content = file_get_contents($filepath);

            $pattern_matches = 0;
            foreach ($malware_patterns as $pattern) {
                if (preg_match($pattern, $content)) {
                    $pattern_matches++;
                }
            }

            // Heuristic scoring
            $heuristic_score = 0;
            if (preg_match_all('/chr\(\d+\)/', $content) > 10) $heuristic_score += 30;
            if (preg_match('/\$\w+\s*\(\s*\$/', $content)) $heuristic_score += 25;
            if (preg_match('/\^\s*\$/', $content)) $heuristic_score += 20;
            if (preg_match('/base64_decode.*eval/s', $content)) $heuristic_score += 50;

            if ($pattern_matches > 0 || $heuristic_score >= 25) {
                $suspicious_files[] = [
                    'file' => str_replace($wordpress_root, '', $filepath),
                    'patterns' => $pattern_matches,
                    'heuristic' => $heuristic_score,
                    'size' => filesize($filepath)
                ];
            }
        }
    }

    if (!empty($suspicious_files)) {
        echo "üö® FOUND " . count($suspicious_files) . " SUSPICIOUS FILES:\n\n";
        foreach ($suspicious_files as $file) {
            echo "File: " . $file['file'] . "\n";
            echo "  Patterns matched: " . $file['patterns'] . "\n";
            echo "  Heuristic score: " . $file['heuristic'] . "\n";
            echo "  File size: " . $file['size'] . " bytes\n";
            echo "  Risk level: ";

            $total_risk = $file['patterns'] * 10 + $file['heuristic'];
            if ($total_risk >= 50) {
                echo "üî• HIGH\n";
            } elseif ($total_risk >= 25) {
                echo "‚ö†Ô∏è  MEDIUM\n";
            } else {
                echo "üü° LOW\n";
            }
            echo "\n";
        }
    } else {
        echo "‚úì No suspicious PHP files found in uploads\n";
    }
} else {
    echo "‚ùå Uploads directory not found\n";
}

echo "\n=== FINAL ASSESSMENT ===\n";
if (!empty($suspicious_files)) {
    echo "üö® SECURITY THREAT DETECTED!\n";
    echo "Your WordPress site has " . count($suspicious_files) . " suspicious files that need immediate attention.\n";
    echo "\nRECOMMENDED ACTIONS:\n";
    echo "1. Backup your site immediately\n";
    echo "2. Remove the suspicious files listed above\n";
    echo "3. Change all passwords (WordPress admin, hosting, FTP)\n";
    echo "4. Update WordPress core, themes, and plugins\n";
    echo "5. Scan for additional malware\n";
} else {
    echo "‚úÖ No immediate threats detected in uploads directory.\n";
}
